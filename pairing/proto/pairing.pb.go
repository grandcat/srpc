// Code generated by protoc-gen-go.
// source: pairing.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	pairing.proto

It has these top-level messages:
	RegisterRequest
	StatusReply
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_REJECTED         Status = 0
	Status_WAITING_APPROVAL Status = 1
	Status_REGISTERED       Status = 2
)

var Status_name = map[int32]string{
	0: "REJECTED",
	1: "WAITING_APPROVAL",
	2: "REGISTERED",
}
var Status_value = map[string]int32{
	"REJECTED":         0,
	"WAITING_APPROVAL": 1,
	"REGISTERED":       2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RegisterRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Location string `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	// Custom application data passed with
	// [proto3] ANY: https://developers.google.com/protocol-buffers/docs/proto3#any
	// [proto2] extensions: https://developers.google.com/protocol-buffers/docs/proto#extensions
	Details *google_protobuf1.Any `protobuf:"bytes,3,opt,name=details" json:"details,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterRequest) GetDetails() *google_protobuf1.Any {
	if m != nil {
		return m.Details
	}
	return nil
}

type StatusReply struct {
	Status Status `protobuf:"varint,1,opt,name=status,enum=auth.Status" json:"status,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "auth.RegisterRequest")
	proto.RegisterType((*StatusReply)(nil), "auth.StatusReply")
	proto.RegisterEnum("auth.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Pairing service

type PairingClient interface {
	// Register a new client certificate
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*StatusReply, error)
	// Probe the status for the registered status
	Status(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*StatusReply, error)
}

type pairingClient struct {
	cc *grpc.ClientConn
}

func NewPairingClient(cc *grpc.ClientConn) PairingClient {
	return &pairingClient{cc}
}

func (c *pairingClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/auth.Pairing/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairingClient) Status(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/auth.Pairing/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pairing service

type PairingServer interface {
	// Register a new client certificate
	Register(context.Context, *RegisterRequest) (*StatusReply, error)
	// Probe the status for the registered status
	Status(context.Context, *google_protobuf.Empty) (*StatusReply, error)
}

func RegisterPairingServer(s *grpc.Server, srv PairingServer) {
	s.RegisterService(&_Pairing_serviceDesc, srv)
}

func _Pairing_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairingServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Pairing/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairingServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pairing_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairingServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Pairing/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairingServer).Status(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pairing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Pairing",
	HandlerType: (*PairingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Pairing_Register_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Pairing_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("pairing.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0xcd, 0x4f, 0xfa, 0x40,
	0x10, 0xa5, 0xfc, 0x08, 0x1f, 0x03, 0x3f, 0xc4, 0x09, 0x2a, 0xd6, 0x8b, 0x21, 0xc6, 0x18, 0x0f,
	0x4b, 0x02, 0xd1, 0x93, 0x97, 0xa2, 0x0d, 0xc1, 0x18, 0x6d, 0x16, 0xa2, 0x47, 0xb3, 0xc5, 0xb5,
	0x34, 0x29, 0xdd, 0xd2, 0xdd, 0x26, 0xf2, 0xdf, 0x0b, 0xdb, 0x85, 0x44, 0xf4, 0xd6, 0x99, 0xf7,
	0xa6, 0xef, 0x63, 0xe1, 0x7f, 0xc2, 0xc2, 0x34, 0x8c, 0x03, 0x92, 0xa4, 0x42, 0x09, 0x2c, 0xb1,
	0x4c, 0xcd, 0xed, 0xb3, 0x40, 0x88, 0x20, 0xe2, 0x3d, 0xbd, 0xf3, 0xb3, 0xcf, 0x1e, 0x5f, 0x24,
	0x6a, 0x95, 0x53, 0xec, 0xd3, 0x7d, 0x90, 0xc5, 0x06, 0xea, 0x2e, 0xe1, 0x80, 0xf2, 0x20, 0x94,
	0x8a, 0xa7, 0x94, 0x2f, 0x33, 0x2e, 0x15, 0x22, 0x94, 0x62, 0xb6, 0xe0, 0x1d, 0xeb, 0xdc, 0xba,
	0xaa, 0x51, 0xfd, 0x8d, 0x36, 0x54, 0x23, 0x31, 0x63, 0x2a, 0x14, 0x71, 0xa7, 0xa8, 0xf7, 0xbb,
	0x19, 0x09, 0x54, 0x3e, 0xb8, 0x62, 0x61, 0x24, 0x3b, 0xff, 0xd6, 0x50, 0xbd, 0xdf, 0x26, 0xb9,
	0x1e, 0xd9, 0xea, 0x11, 0x27, 0x5e, 0xd1, 0x2d, 0xa9, 0x3b, 0x80, 0xfa, 0x44, 0x31, 0x95, 0x49,
	0xca, 0x93, 0x68, 0x85, 0x17, 0x50, 0x96, 0x7a, 0xd4, 0x82, 0xcd, 0x7e, 0x83, 0x6c, 0x02, 0x11,
	0x43, 0x31, 0xd8, 0xf5, 0x1d, 0x94, 0xf3, 0x0d, 0x36, 0xa0, 0x4a, 0xdd, 0x47, 0xf7, 0x7e, 0xea,
	0x3e, 0xb4, 0x0a, 0xd8, 0x86, 0xd6, 0x9b, 0x33, 0x9e, 0x8e, 0x9f, 0x47, 0xef, 0x8e, 0xe7, 0xd1,
	0x97, 0x57, 0xe7, 0xa9, 0x65, 0x61, 0x13, 0x80, 0xba, 0xa3, 0xf1, 0x64, 0xea, 0xd2, 0x35, 0xab,
	0xd8, 0xff, 0x82, 0x8a, 0x97, 0x97, 0x86, 0xb7, 0xeb, 0x73, 0x13, 0x18, 0x8f, 0x72, 0xa9, 0xbd,
	0x02, 0xec, 0xc3, 0x1f, 0x0e, 0x36, 0x26, 0xbb, 0x05, 0xbc, 0xd9, 0x19, 0x38, 0xfe, 0x15, 0xcf,
	0xdd, 0x74, 0xfd, 0xe7, 0xd9, 0xf0, 0x12, 0x4e, 0x66, 0x62, 0x41, 0x82, 0x50, 0xcd, 0x33, 0x9f,
	0xc8, 0x34, 0x99, 0x11, 0xf3, 0x7c, 0xc3, 0x9a, 0xe7, 0x1b, 0x53, 0x9e, 0xe5, 0x97, 0xf5, 0xcf,
	0x06, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0xa1, 0x9e, 0x68, 0xdd, 0x01, 0x00, 0x00,
}
